name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  # Job untuk quality checks dan testing
  quality-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    # BOM Check - hanya di Ubuntu untuk efisiensi
    - name: Check for BOM in files
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "Checking for BOM (Byte Order Mark) in text files..."
        
        # Find all text files with specified extensions
        files=$(git ls-files | grep -E "\.(js|ts|json|md|mjs|css|html|yml|yaml)$" || true)
        
        bom_files=()
        
        for file in $files; do
          if [ -f "$file" ]; then
            # Check if file starts with BOM (EF BB BF)
            if head -c 3 "$file" | xxd -p | grep -q "efbbbf"; then
              bom_files+=("$file")
            fi
          fi
        done
        
        if [ ${#bom_files[@]} -gt 0 ]; then
          echo "‚ùå BOM detected in the following files:"
          for file in "${bom_files[@]}"; do
            echo "  - $file"
          done
          echo ""
          echo "To remove BOM from these files, you can use:"
          echo "  sed -i '1s/^\xEF\xBB\xBF//' <filename>"
          echo "  or use your editor to save the file as UTF-8 without BOM"
          exit 1
        else
          echo "‚úÖ No BOM detected in any files."
        fi
      
    - name: Build CLI
      run: npm run build
      
    - name: Run tests
      if: matrix.os == 'ubuntu-latest'
      run: npm test
      
    # E2E Testing
    - name: Test CLI scaffolding (basic)
      shell: bash
      run: |
        # Create test directory
        mkdir -p test-projects
        cd test-projects
        
        # Test scaffolding with default settings
        node ../dist/index.js my-test-app --no-install
        
        # Verify project structure
        if [ ! -d "my-test-app" ]; then
          echo "‚ùå Project directory not created"
          exit 1
        fi
        
        cd my-test-app
        
        # Check essential files exist
        essential_files=("package.json" "tsconfig.json" "astro.config.mjs")
        for file in "${essential_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Essential file missing: $file"
            exit 1
          fi
        done
        
        # Check for BOM in package.json (most critical file)
        if command -v xxd >/dev/null 2>&1; then
          if head -c 3 package.json | xxd -p | grep -q "efbbbf"; then
            echo "‚ùå BOM detected in package.json"
            exit 1
          else
            echo "‚úÖ No BOM detected in package.json"
          fi
        elif command -v od >/dev/null 2>&1; then
          # Fallback for systems without xxd
          if od -t x1 -N 3 package.json | head -1 | grep -q "ef bb bf"; then
            echo "‚ùå BOM detected in package.json"
            exit 1
          else
            echo "‚úÖ No BOM detected in package.json"
          fi
        fi
        
        # Verify package.json has correct project name
        if ! grep -q '"name": "my-test-app"' package.json; then
          echo "‚ùå Package name not updated correctly"
          exit 1
        fi
        
        echo "‚úÖ Basic scaffolding test passed"
        
    - name: Test with custom ref (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        cd test-projects
        
        # Test with specific ref (using master as fallback)
        node ../dist/index.js my-test-app-ref --ref master --no-install
        
        if [ ! -d "my-test-app-ref" ]; then
          echo "‚ùå Project with custom ref not created"
          exit 1
        fi
        
        echo "‚úÖ Custom ref test passed"
        
    - name: Test installation and build (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        cd test-projects
        
        # Create project with installation
        node ../dist/index.js my-test-app-build
        
        cd my-test-app-build
        
        # Debug: Check which package manager was detected
        echo "üì¶ Checking package manager availability..."
        if command -v pnpm >/dev/null 2>&1; then
          echo "‚úÖ pnpm available: $(pnpm --version)"
        else
          echo "‚ùå pnpm not available"
        fi
        
        if command -v yarn >/dev/null 2>&1; then
          echo "‚úÖ yarn available: $(yarn --version)"
        else
          echo "‚ùå yarn not available"
        fi
        
        echo "‚úÖ npm available: $(npm --version)"
        
        # Debug: Check package.json content
        echo "üìÑ Package.json name: $(grep '"name"' package.json)"
        
        # Try to build the project
        npm run build
        
        # Check if build succeeded
        if [ ! -d "dist" ]; then
          echo "‚ùå Build failed - dist directory not created"
          exit 1
        fi
        
        echo "‚úÖ Build test passed"
        
    - name: Cleanup
      shell: bash
      run: |
        rm -rf test-projects

  # Job untuk release - hanya berjalan di push ke master dan setelah quality checks berhasil
  release:
    needs: quality-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build
      run: npm run build
      
    - name: Release
      env:
        GITHUB_TOKEN: ${{ secrets.USER_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npx semantic-release